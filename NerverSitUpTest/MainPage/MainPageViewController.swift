//
//  MainPageViewController.swift
//  NerverSitUpTest
//
//  Created by Ratchanon Insuvanno on 6/1/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ProgressHUD

protocol MainPageDisplayLogic: class
{
    func displayGetCoinSucess(viewModel : MainPage.FetchCoin.ViewModel)
    func displayGetCoinFailure(viewModel : MainPage.FetchCoin.ViewModel)
}

class MainPageViewController: UIViewController, MainPageDisplayLogic
{

    
  var interactor: MainPageBusinessLogic?
  var router: (NSObjectProtocol & MainPageRoutingLogic & MainPageDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainPageInteractor()
    let presenter = MainPagePresenter()
    let router = MainPageRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    @IBOutlet weak var coinTableView: UITableView! {
        didSet {
            coinTableView.delegate = self
            coinTableView.dataSource = self
            coinTableView.register(UINib(nibName: "NormalTableViewCell", bundle: nil), forCellReuseIdentifier: "NormalTableViewCell")
        }
    }
    var coinsData : GetCoinsViewModel?
    var previousValueCoins : GetCoinsViewModel?

    weak var timer: Timer?

    // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      interactor?.callGetCoins()
      startTimer()
  }
    
    func startTimer() {
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 60.0, repeats: true) { [weak self] _ in
            self?.previousValueCoins = self?.coinsData
            self?.interactor?.callGetCoins()
        }
    }

    func stopTimer() {
        timer?.invalidate()
    }
    deinit {
        stopTimer()
    }
  
    func displayGetCoinSucess(viewModel: MainPage.FetchCoin.ViewModel) {
        coinTableView.isHidden = false
        coinsData = viewModel.result
        ProgressHUD.dismiss()
        coinTableView.reloadData()
    }
    
    func displayGetCoinFailure(viewModel: MainPage.FetchCoin.ViewModel) {
        ProgressHUD.dismiss()
        let alert = UIAlertController(title: "\(viewModel.errorResult?.message ?? ""  )", message: " \(viewModel.errorResult?.status ?? "" ) \(viewModel.errorResult?.code ?? "")", preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
}

extension MainPageViewController :  UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 3
    }
    


    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 120
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
         let cell = tableView.dequeueReusableCell(withIdentifier: "NormalTableViewCell", for: indexPath) as! NormalTableViewCell
        switch indexPath.row {
        case 0:
            cell.setupUI(coinsData: coinsData?.bpi.eur.rateFloat, viewModel: NormalTableViewCellViewModel(imageView: coinsData?.bpi.eur.symbol ?? "", title: coinsData?.bpi.eur.code ?? "", subtitle: coinsData?.bpi.eur.rate ?? "", detail: coinsData?.bpi.eur.eurDescription ?? "", price: "\(coinsData?.bpi.eur.rateFloat ?? 0.00)"), previousPrice: previousValueCoins?.bpi.eur.rate ?? "")
        case 1:
            cell.setupUI(coinsData: coinsData?.bpi.eur.rateFloat, viewModel: NormalTableViewCellViewModel(imageView: coinsData?.bpi.gbp.symbol ?? "", title: coinsData?.bpi.gbp.code ?? "", subtitle: coinsData?.bpi.gbp.rate ?? "", detail: coinsData?.bpi.gbp.eurDescription ?? "", price: "\(coinsData?.bpi.gbp.rateFloat ?? 0.00)"), previousPrice: previousValueCoins?.bpi.gbp.rate ?? "")
        case 2:
            cell.setupUI(coinsData: coinsData?.bpi.eur.rateFloat, viewModel: NormalTableViewCellViewModel(imageView: coinsData?.bpi.usd.symbol ?? "", title: coinsData?.bpi.usd.code ?? "", subtitle: coinsData?.bpi.usd.rate ?? "", detail: coinsData?.bpi.usd.eurDescription ?? "", price: "\(coinsData?.bpi.usd.rateFloat ?? 0.00)"), previousPrice: previousValueCoins?.bpi.usd.rate ?? "")
        default:
            break
        }
        return cell
    }
    
    
    
}

